import TextEditor from "@SpComponents/FileEditor/TextEditor";
import { ColorOptions, ToolbarItem } from "@SpComponents/FileEditor/ToolBar";
import { FileNames } from "@SpCore/Project/FileMapping";
import { ProjectContext } from "@SpCore/Project/ProjectContextProvider";
import {
  DataSource,
  ProjectKnownFiles,
} from "@SpCore/Project/ProjectDataModel";
import { unreachable } from "@SpUtil/unreachable";
import { FunctionComponent, useCallback, use, useMemo } from "react";

const DataEditorPanel: FunctionComponent = () => {
  const { data, update } = use(ProjectContext);

  const dataIsEdited = useMemo(() => {
    return data.dataFileContent !== data.ephemera.dataFileContent;
  }, [data.dataFileContent, data.ephemera.dataFileContent]);

  const dataSourceDesc: undefined | { msg: string; color: ColorOptions } =
    useMemo(() => {
      if (dataIsEdited) return undefined;

      switch (data.meta.dataSource) {
        case undefined: {
          return undefined;
        }
        case DataSource.GENERATED_BY_PYTHON: {
          return { msg: "data.py", color: "info.main" };
        }
        case DataSource.GENERATED_BY_R: {
          return { msg: "data.R", color: "info.main" };
        }
        case DataSource.GENERATED_BY_STALE_PYTHON: {
          return { msg: "a prior version of data.py.", color: "warning.main" };
        }
        case DataSource.GENERATED_BY_STALE_R: {
          return { msg: "a prior version of data.R.", color: "warning.main" };
        }
        default:
          return unreachable(data.meta.dataSource);
      }
    }, [dataIsEdited, data.meta.dataSource]);

  const dataMessage: ToolbarItem[] = useMemo(() => {
    if (dataSourceDesc === undefined) {
      return [];
    } else {
      return [
        {
          type: "text",
          label: `Data generated by ${dataSourceDesc.msg}`,
          color: dataSourceDesc.color,
        },
      ];
    }
  }, [dataSourceDesc]);

  const onSetEditedText = useCallback(
    (content: string) => {
      update({
        type: "editFile",
        content,
        filename: ProjectKnownFiles.DATAFILE,
      });
    },
    [update],
  );

  const onSaveText = useCallback(() => {
    update({
      type: "commitFile",
      filename: ProjectKnownFiles.DATAFILE,
    });
  }, [update]);

  return (
    <TextEditor
      language="json"
      label={FileNames.DATAFILE}
      text={data.dataFileContent}
      onSaveText={onSaveText}
      editedText={data.ephemera.dataFileContent}
      onSetEditedText={onSetEditedText}
      readOnly={false}
      toolbarItems={dataMessage}
      contentOnEmpty={"Enter JSON data or use the data generation tab"}
    />
  );
};

export default DataEditorPanel;
